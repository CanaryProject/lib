// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_LOGINDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct Challenge;
struct ChallengeBuilder;

struct LoginData;
struct LoginDataBuilder;

enum Client_t {
  Client_t_UNKNOWN = 0,
  Client_t_CANARY = 19,
  Client_t_MIN = Client_t_UNKNOWN,
  Client_t_MAX = Client_t_CANARY
};

inline const Client_t (&EnumValuesClient_t())[2] {
  static const Client_t values[] = {
    Client_t_UNKNOWN,
    Client_t_CANARY
  };
  return values;
}

inline const char *EnumNameClient_t(Client_t e) {
  switch (e) {
    case Client_t_UNKNOWN: return "UNKNOWN";
    case Client_t_CANARY: return "CANARY";
    default: return "";
  }
}

struct Challenge FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChallengeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_RANDOM = 6
  };
  uint32_t timestamp() const {
    return GetField<uint32_t>(VT_TIMESTAMP, 0);
  }
  uint8_t random() const {
    return GetField<uint8_t>(VT_RANDOM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_RANDOM) &&
           verifier.EndTable();
  }
};

struct ChallengeBuilder {
  typedef Challenge Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(uint32_t timestamp) {
    fbb_.AddElement<uint32_t>(Challenge::VT_TIMESTAMP, timestamp, 0);
  }
  void add_random(uint8_t random) {
    fbb_.AddElement<uint8_t>(Challenge::VT_RANDOM, random, 0);
  }
  explicit ChallengeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Challenge> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Challenge>(end);
    return o;
  }
};

inline flatbuffers::Offset<Challenge> CreateChallenge(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t timestamp = 0,
    uint8_t random = 0) {
  ChallengeBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_random(random);
  return builder_.Finish();
}

struct LoginData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT = 4,
    VT_CHALLENGE = 6,
    VT_LOGIN_INFO = 8
  };
  CanaryLib::Client_t client() const {
    return static_cast<CanaryLib::Client_t>(GetField<uint8_t>(VT_CLIENT, 0));
  }
  const CanaryLib::Challenge *challenge() const {
    return GetPointer<const CanaryLib::Challenge *>(VT_CHALLENGE);
  }
  const flatbuffers::Vector<uint8_t> *login_info() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_LOGIN_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT) &&
           VerifyOffset(verifier, VT_CHALLENGE) &&
           verifier.VerifyTable(challenge()) &&
           VerifyOffset(verifier, VT_LOGIN_INFO) &&
           verifier.VerifyVector(login_info()) &&
           verifier.EndTable();
  }
};

struct LoginDataBuilder {
  typedef LoginData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client(CanaryLib::Client_t client) {
    fbb_.AddElement<uint8_t>(LoginData::VT_CLIENT, static_cast<uint8_t>(client), 0);
  }
  void add_challenge(flatbuffers::Offset<CanaryLib::Challenge> challenge) {
    fbb_.AddOffset(LoginData::VT_CHALLENGE, challenge);
  }
  void add_login_info(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> login_info) {
    fbb_.AddOffset(LoginData::VT_LOGIN_INFO, login_info);
  }
  explicit LoginDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoginData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginData>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginData> CreateLoginData(
    flatbuffers::FlatBufferBuilder &_fbb,
    CanaryLib::Client_t client = CanaryLib::Client_t_UNKNOWN,
    flatbuffers::Offset<CanaryLib::Challenge> challenge = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> login_info = 0) {
  LoginDataBuilder builder_(_fbb);
  builder_.add_login_info(login_info);
  builder_.add_challenge(challenge);
  builder_.add_client(client);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginData> CreateLoginDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    CanaryLib::Client_t client = CanaryLib::Client_t_UNKNOWN,
    flatbuffers::Offset<CanaryLib::Challenge> challenge = 0,
    const std::vector<uint8_t> *login_info = nullptr) {
  auto login_info__ = login_info ? _fbb.CreateVector<uint8_t>(*login_info) : 0;
  return CanaryLib::CreateLoginData(
      _fbb,
      client,
      challenge,
      login_info__);
}

inline const CanaryLib::LoginData *GetLoginData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::LoginData>(buf);
}

inline const CanaryLib::LoginData *GetSizePrefixedLoginData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::LoginData>(buf);
}

inline bool VerifyLoginDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::LoginData>(nullptr);
}

inline bool VerifySizePrefixedLoginDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::LoginData>(nullptr);
}

inline void FinishLoginDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::LoginData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::LoginData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_LOGINDATA_CANARYLIB_H_
