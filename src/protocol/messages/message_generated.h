// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_MESSAGE_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

#include "player_data_generated.h"
#include "weapon_data_generated.h"

namespace CanaryLib {

struct Message;
struct MessageBuilder;

enum Data {
  Data_NONE = 0,
  Data_PlayerData = 1,
  Data_WeaponData = 2,
  Data_MIN = Data_NONE,
  Data_MAX = Data_WeaponData
};

inline const Data (&EnumValuesData())[3] {
  static const Data values[] = {
    Data_NONE,
    Data_PlayerData,
    Data_WeaponData
  };
  return values;
}

inline const char * const *EnumNamesData() {
  static const char * const names[4] = {
    "NONE",
    "PlayerData",
    "WeaponData",
    nullptr
  };
  return names;
}

inline const char *EnumNameData(Data e) {
  if (flatbuffers::IsOutRange(e, Data_NONE, Data_WeaponData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesData()[index];
}

template<typename T> struct DataTraits {
  static const Data enum_value = Data_NONE;
};

template<> struct DataTraits<CanaryLib::PlayerData> {
  static const Data enum_value = Data_PlayerData;
};

template<> struct DataTraits<CanaryLib::WeaponData> {
  static const Data enum_value = Data_WeaponData;
};

bool VerifyData(flatbuffers::Verifier &verifier, const void *obj, Data type);
bool VerifyDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_DATA_TYPE = 4,
    VT_MESSAGE_DATA = 6
  };
  const flatbuffers::Vector<uint8_t> *message_data_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE_DATA_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *message_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_MESSAGE_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE_DATA_TYPE) &&
           verifier.VerifyVector(message_data_type()) &&
           VerifyOffset(verifier, VT_MESSAGE_DATA) &&
           verifier.VerifyVector(message_data()) &&
           VerifyDataVector(verifier, message_data(), message_data_type()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_data_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_data_type) {
    fbb_.AddOffset(Message::VT_MESSAGE_DATA_TYPE, message_data_type);
  }
  void add_message_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> message_data) {
    fbb_.AddOffset(Message::VT_MESSAGE_DATA, message_data);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_data_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> message_data = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_message_data(message_data);
  builder_.add_message_data_type(message_data_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *message_data_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *message_data = nullptr) {
  auto message_data_type__ = message_data_type ? _fbb.CreateVector<uint8_t>(*message_data_type) : 0;
  auto message_data__ = message_data ? _fbb.CreateVector<flatbuffers::Offset<void>>(*message_data) : 0;
  return CanaryLib::CreateMessage(
      _fbb,
      message_data_type__,
      message_data__);
}

inline bool VerifyData(flatbuffers::Verifier &verifier, const void *obj, Data type) {
  switch (type) {
    case Data_NONE: {
      return true;
    }
    case Data_PlayerData: {
      auto ptr = reinterpret_cast<const CanaryLib::PlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Data_WeaponData: {
      auto ptr = reinterpret_cast<const CanaryLib::WeaponData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyData(
        verifier,  values->Get(i), types->GetEnum<Data>(i))) {
      return false;
    }
  }
  return true;
}

inline const CanaryLib::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::Message>(buf);
}

inline const CanaryLib::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_MESSAGE_CANARYLIB_H_
