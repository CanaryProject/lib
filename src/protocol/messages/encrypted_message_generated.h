// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENCRYPTEDMESSAGE_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_ENCRYPTEDMESSAGE_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct EncryptedMessage;
struct EncryptedMessageBuilder;

struct EncryptedMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EncryptedMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHECKSUM = 4,
    VT_MESSAGE_SIZE = 6,
    VT_ENCRYPTED = 8,
    VT_BODY = 10
  };
  uint32_t checksum() const {
    return GetField<uint32_t>(VT_CHECKSUM, 0);
  }
  uint16_t message_size() const {
    return GetField<uint16_t>(VT_MESSAGE_SIZE, 0);
  }
  bool encrypted() const {
    return GetField<uint8_t>(VT_ENCRYPTED, 1) != 0;
  }
  const flatbuffers::Vector<uint8_t> *body() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BODY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHECKSUM) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGE_SIZE) &&
           VerifyField<uint8_t>(verifier, VT_ENCRYPTED) &&
           VerifyOffset(verifier, VT_BODY) &&
           verifier.VerifyVector(body()) &&
           verifier.EndTable();
  }
};

struct EncryptedMessageBuilder {
  typedef EncryptedMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_checksum(uint32_t checksum) {
    fbb_.AddElement<uint32_t>(EncryptedMessage::VT_CHECKSUM, checksum, 0);
  }
  void add_message_size(uint16_t message_size) {
    fbb_.AddElement<uint16_t>(EncryptedMessage::VT_MESSAGE_SIZE, message_size, 0);
  }
  void add_encrypted(bool encrypted) {
    fbb_.AddElement<uint8_t>(EncryptedMessage::VT_ENCRYPTED, static_cast<uint8_t>(encrypted), 1);
  }
  void add_body(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body) {
    fbb_.AddOffset(EncryptedMessage::VT_BODY, body);
  }
  explicit EncryptedMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EncryptedMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EncryptedMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<EncryptedMessage> CreateEncryptedMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t checksum = 0,
    uint16_t message_size = 0,
    bool encrypted = true,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body = 0) {
  EncryptedMessageBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_checksum(checksum);
  builder_.add_message_size(message_size);
  builder_.add_encrypted(encrypted);
  return builder_.Finish();
}

inline flatbuffers::Offset<EncryptedMessage> CreateEncryptedMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t checksum = 0,
    uint16_t message_size = 0,
    bool encrypted = true,
    const std::vector<uint8_t> *body = nullptr) {
  auto body__ = body ? _fbb.CreateVector<uint8_t>(*body) : 0;
  return CanaryLib::CreateEncryptedMessage(
      _fbb,
      checksum,
      message_size,
      encrypted,
      body__);
}

inline const CanaryLib::EncryptedMessage *GetEncryptedMessage(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::EncryptedMessage>(buf);
}

inline const CanaryLib::EncryptedMessage *GetSizePrefixedEncryptedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::EncryptedMessage>(buf);
}

inline bool VerifyEncryptedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::EncryptedMessage>(nullptr);
}

inline bool VerifySizePrefixedEncryptedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::EncryptedMessage>(nullptr);
}

inline void FinishEncryptedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::EncryptedMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEncryptedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::EncryptedMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_ENCRYPTEDMESSAGE_CANARYLIB_H_
