// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERSLISTDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_CHARACTERSLISTDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct AccountInfo;
struct AccountInfoBuilder;

struct CharacterInfo;
struct CharacterInfoBuilder;

struct WorldInfo;
struct WorldInfoBuilder;

struct CharactersListData;
struct CharactersListDataBuilder;

struct AccountInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AccountInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FREE_PREMIUM = 4,
    VT_PREMIUM_DAYS = 6,
    VT_SESSION_KEY = 8
  };
  uint8_t free_premium() const {
    return GetField<uint8_t>(VT_FREE_PREMIUM, 0);
  }
  uint16_t premium_days() const {
    return GetField<uint16_t>(VT_PREMIUM_DAYS, 0);
  }
  const flatbuffers::String *session_key() const {
    return GetPointer<const flatbuffers::String *>(VT_SESSION_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FREE_PREMIUM) &&
           VerifyField<uint16_t>(verifier, VT_PREMIUM_DAYS) &&
           VerifyOffset(verifier, VT_SESSION_KEY) &&
           verifier.VerifyString(session_key()) &&
           verifier.EndTable();
  }
};

struct AccountInfoBuilder {
  typedef AccountInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_free_premium(uint8_t free_premium) {
    fbb_.AddElement<uint8_t>(AccountInfo::VT_FREE_PREMIUM, free_premium, 0);
  }
  void add_premium_days(uint16_t premium_days) {
    fbb_.AddElement<uint16_t>(AccountInfo::VT_PREMIUM_DAYS, premium_days, 0);
  }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) {
    fbb_.AddOffset(AccountInfo::VT_SESSION_KEY, session_key);
  }
  explicit AccountInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AccountInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AccountInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<AccountInfo> CreateAccountInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t free_premium = 0,
    uint16_t premium_days = 0,
    flatbuffers::Offset<flatbuffers::String> session_key = 0) {
  AccountInfoBuilder builder_(_fbb);
  builder_.add_session_key(session_key);
  builder_.add_premium_days(premium_days);
  builder_.add_free_premium(free_premium);
  return builder_.Finish();
}

inline flatbuffers::Offset<AccountInfo> CreateAccountInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t free_premium = 0,
    uint16_t premium_days = 0,
    const char *session_key = nullptr) {
  auto session_key__ = session_key ? _fbb.CreateString(session_key) : 0;
  return CanaryLib::CreateAccountInfo(
      _fbb,
      free_premium,
      premium_days,
      session_key__);
}

struct CharacterInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CharacterInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_WORLD_ID = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t world_id() const {
    return GetField<uint8_t>(VT_WORLD_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_WORLD_ID) &&
           verifier.EndTable();
  }
};

struct CharacterInfoBuilder {
  typedef CharacterInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CharacterInfo::VT_NAME, name);
  }
  void add_world_id(uint8_t world_id) {
    fbb_.AddElement<uint8_t>(CharacterInfo::VT_WORLD_ID, world_id, 0);
  }
  explicit CharacterInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CharacterInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CharacterInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CharacterInfo> CreateCharacterInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t world_id = 0) {
  CharacterInfoBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_world_id(world_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<CharacterInfo> CreateCharacterInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t world_id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CanaryLib::CreateCharacterInfo(
      _fbb,
      name__,
      world_id);
}

struct WorldInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WorldInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_IP = 8,
    VT_PORT = 10
  };
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint16_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct WorldInfoBuilder {
  typedef WorldInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(WorldInfo::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WorldInfo::VT_NAME, name);
  }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(WorldInfo::VT_IP, ip);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(WorldInfo::VT_PORT, port, 0);
  }
  explicit WorldInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WorldInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WorldInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<WorldInfo> CreateWorldInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    uint16_t port = 0) {
  WorldInfoBuilder builder_(_fbb);
  builder_.add_ip(ip);
  builder_.add_name(name);
  builder_.add_port(port);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldInfo> CreateWorldInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    const char *name = nullptr,
    const char *ip = nullptr,
    uint16_t port = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return CanaryLib::CreateWorldInfo(
      _fbb,
      id,
      name__,
      ip__,
      port);
}

struct CharactersListData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CharactersListDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_CHARACTERS = 6,
    VT_WORLD = 8,
    VT_MOTD = 10
  };
  const CanaryLib::AccountInfo *account() const {
    return GetPointer<const CanaryLib::AccountInfo *>(VT_ACCOUNT);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CharacterInfo>> *characters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CharacterInfo>> *>(VT_CHARACTERS);
  }
  const CanaryLib::WorldInfo *world() const {
    return GetPointer<const CanaryLib::WorldInfo *>(VT_WORLD);
  }
  const flatbuffers::String *motd() const {
    return GetPointer<const flatbuffers::String *>(VT_MOTD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyTable(account()) &&
           VerifyOffset(verifier, VT_CHARACTERS) &&
           verifier.VerifyVector(characters()) &&
           verifier.VerifyVectorOfTables(characters()) &&
           VerifyOffset(verifier, VT_WORLD) &&
           verifier.VerifyTable(world()) &&
           VerifyOffset(verifier, VT_MOTD) &&
           verifier.VerifyString(motd()) &&
           verifier.EndTable();
  }
};

struct CharactersListDataBuilder {
  typedef CharactersListData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account(flatbuffers::Offset<CanaryLib::AccountInfo> account) {
    fbb_.AddOffset(CharactersListData::VT_ACCOUNT, account);
  }
  void add_characters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CharacterInfo>>> characters) {
    fbb_.AddOffset(CharactersListData::VT_CHARACTERS, characters);
  }
  void add_world(flatbuffers::Offset<CanaryLib::WorldInfo> world) {
    fbb_.AddOffset(CharactersListData::VT_WORLD, world);
  }
  void add_motd(flatbuffers::Offset<flatbuffers::String> motd) {
    fbb_.AddOffset(CharactersListData::VT_MOTD, motd);
  }
  explicit CharactersListDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CharactersListData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CharactersListData>(end);
    return o;
  }
};

inline flatbuffers::Offset<CharactersListData> CreateCharactersListData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<CanaryLib::AccountInfo> account = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CharacterInfo>>> characters = 0,
    flatbuffers::Offset<CanaryLib::WorldInfo> world = 0,
    flatbuffers::Offset<flatbuffers::String> motd = 0) {
  CharactersListDataBuilder builder_(_fbb);
  builder_.add_motd(motd);
  builder_.add_world(world);
  builder_.add_characters(characters);
  builder_.add_account(account);
  return builder_.Finish();
}

inline flatbuffers::Offset<CharactersListData> CreateCharactersListDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<CanaryLib::AccountInfo> account = 0,
    const std::vector<flatbuffers::Offset<CanaryLib::CharacterInfo>> *characters = nullptr,
    flatbuffers::Offset<CanaryLib::WorldInfo> world = 0,
    const char *motd = nullptr) {
  auto characters__ = characters ? _fbb.CreateVector<flatbuffers::Offset<CanaryLib::CharacterInfo>>(*characters) : 0;
  auto motd__ = motd ? _fbb.CreateString(motd) : 0;
  return CanaryLib::CreateCharactersListData(
      _fbb,
      account,
      characters__,
      world,
      motd__);
}

inline const CanaryLib::CharactersListData *GetCharactersListData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::CharactersListData>(buf);
}

inline const CanaryLib::CharactersListData *GetSizePrefixedCharactersListData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::CharactersListData>(buf);
}

inline bool VerifyCharactersListDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::CharactersListData>(nullptr);
}

inline bool VerifySizePrefixedCharactersListDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::CharactersListData>(nullptr);
}

inline void FinishCharactersListDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::CharactersListData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCharactersListDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::CharactersListData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_CHARACTERSLISTDATA_CANARYLIB_H_
