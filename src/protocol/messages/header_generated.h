// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEADER_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_HEADER_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct Header;
struct HeaderBuilder;

enum ContentFormat {
  ContentFormat_RawMessage = 0,
  ContentFormat_Flatbuffers = 1,
  ContentFormat_MIN = ContentFormat_RawMessage,
  ContentFormat_MAX = ContentFormat_Flatbuffers
};

inline const ContentFormat (&EnumValuesContentFormat())[2] {
  static const ContentFormat values[] = {
    ContentFormat_RawMessage,
    ContentFormat_Flatbuffers
  };
  return values;
}

inline const char * const *EnumNamesContentFormat() {
  static const char * const names[3] = {
    "RawMessage",
    "Flatbuffers",
    nullptr
  };
  return names;
}

inline const char *EnumNameContentFormat(ContentFormat e) {
  if (flatbuffers::IsOutRange(e, ContentFormat_RawMessage, ContentFormat_Flatbuffers)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesContentFormat()[index];
}

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHECKSUM = 4,
    VT_SIZE = 6,
    VT_FORMAT = 8
  };
  uint32_t checksum() const {
    return GetField<uint32_t>(VT_CHECKSUM, 0);
  }
  uint16_t size() const {
    return GetField<uint16_t>(VT_SIZE, 0);
  }
  CanaryLib::ContentFormat format() const {
    return static_cast<CanaryLib::ContentFormat>(GetField<int8_t>(VT_FORMAT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHECKSUM) &&
           VerifyField<uint16_t>(verifier, VT_SIZE) &&
           VerifyField<int8_t>(verifier, VT_FORMAT) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_checksum(uint32_t checksum) {
    fbb_.AddElement<uint32_t>(Header::VT_CHECKSUM, checksum, 0);
  }
  void add_size(uint16_t size) {
    fbb_.AddElement<uint16_t>(Header::VT_SIZE, size, 0);
  }
  void add_format(CanaryLib::ContentFormat format) {
    fbb_.AddElement<int8_t>(Header::VT_FORMAT, static_cast<int8_t>(format), 0);
  }
  explicit HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t checksum = 0,
    uint16_t size = 0,
    CanaryLib::ContentFormat format = CanaryLib::ContentFormat_RawMessage) {
  HeaderBuilder builder_(_fbb);
  builder_.add_checksum(checksum);
  builder_.add_size(size);
  builder_.add_format(format);
  return builder_.Finish();
}

inline const CanaryLib::Header *GetHeader(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::Header>(buf);
}

inline const CanaryLib::Header *GetSizePrefixedHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::Header>(buf);
}

inline bool VerifyHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::Header>(nullptr);
}

inline bool VerifySizePrefixedHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::Header>(nullptr);
}

inline void FinishHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::Header> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::Header> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_HEADER_CANARYLIB_H_
