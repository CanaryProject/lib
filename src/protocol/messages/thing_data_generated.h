// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THINGDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_THINGDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

#include "creature_data_generated.h"
#include "general_structures_generated.h"
#include "item_data_generated.h"

namespace CanaryLib {

struct ThingData;
struct ThingDataBuilder;

enum Thing {
  Thing_NONE = 0,
  Thing_CreatureData = 1,
  Thing_ItemData = 2,
  Thing_MIN = Thing_NONE,
  Thing_MAX = Thing_ItemData
};

inline const Thing (&EnumValuesThing())[3] {
  static const Thing values[] = {
    Thing_NONE,
    Thing_CreatureData,
    Thing_ItemData
  };
  return values;
}

inline const char * const *EnumNamesThing() {
  static const char * const names[4] = {
    "NONE",
    "CreatureData",
    "ItemData",
    nullptr
  };
  return names;
}

inline const char *EnumNameThing(Thing e) {
  if (flatbuffers::IsOutRange(e, Thing_NONE, Thing_ItemData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesThing()[index];
}

template<typename T> struct ThingTraits {
  static const Thing enum_value = Thing_NONE;
};

template<> struct ThingTraits<CanaryLib::CreatureData> {
  static const Thing enum_value = Thing_CreatureData;
};

template<> struct ThingTraits<CanaryLib::ItemData> {
  static const Thing enum_value = Thing_ItemData;
};

bool VerifyThing(flatbuffers::Verifier &verifier, const void *obj, Thing type);
bool VerifyThingVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ThingData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ThingDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_THING_TYPE = 4,
    VT_THING = 6,
    VT_POS = 8,
    VT_CLEAN_TILE = 10,
    VT_IS_CENTRAL_POS = 12
  };
  CanaryLib::Thing thing_type() const {
    return static_cast<CanaryLib::Thing>(GetField<uint8_t>(VT_THING_TYPE, 0));
  }
  const void *thing() const {
    return GetPointer<const void *>(VT_THING);
  }
  template<typename T> const T *thing_as() const;
  const CanaryLib::CreatureData *thing_as_CreatureData() const {
    return thing_type() == CanaryLib::Thing_CreatureData ? static_cast<const CanaryLib::CreatureData *>(thing()) : nullptr;
  }
  const CanaryLib::ItemData *thing_as_ItemData() const {
    return thing_type() == CanaryLib::Thing_ItemData ? static_cast<const CanaryLib::ItemData *>(thing()) : nullptr;
  }
  const CanaryLib::Position *pos() const {
    return GetStruct<const CanaryLib::Position *>(VT_POS);
  }
  bool clean_tile() const {
    return GetField<uint8_t>(VT_CLEAN_TILE, 0) != 0;
  }
  bool is_central_pos() const {
    return GetField<uint8_t>(VT_IS_CENTRAL_POS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_THING_TYPE) &&
           VerifyOffset(verifier, VT_THING) &&
           VerifyThing(verifier, thing(), thing_type()) &&
           VerifyField<CanaryLib::Position>(verifier, VT_POS) &&
           VerifyField<uint8_t>(verifier, VT_CLEAN_TILE) &&
           VerifyField<uint8_t>(verifier, VT_IS_CENTRAL_POS) &&
           verifier.EndTable();
  }
};

template<> inline const CanaryLib::CreatureData *ThingData::thing_as<CanaryLib::CreatureData>() const {
  return thing_as_CreatureData();
}

template<> inline const CanaryLib::ItemData *ThingData::thing_as<CanaryLib::ItemData>() const {
  return thing_as_ItemData();
}

struct ThingDataBuilder {
  typedef ThingData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_thing_type(CanaryLib::Thing thing_type) {
    fbb_.AddElement<uint8_t>(ThingData::VT_THING_TYPE, static_cast<uint8_t>(thing_type), 0);
  }
  void add_thing(flatbuffers::Offset<void> thing) {
    fbb_.AddOffset(ThingData::VT_THING, thing);
  }
  void add_pos(const CanaryLib::Position *pos) {
    fbb_.AddStruct(ThingData::VT_POS, pos);
  }
  void add_clean_tile(bool clean_tile) {
    fbb_.AddElement<uint8_t>(ThingData::VT_CLEAN_TILE, static_cast<uint8_t>(clean_tile), 0);
  }
  void add_is_central_pos(bool is_central_pos) {
    fbb_.AddElement<uint8_t>(ThingData::VT_IS_CENTRAL_POS, static_cast<uint8_t>(is_central_pos), 0);
  }
  explicit ThingDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ThingData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ThingData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ThingData> CreateThingData(
    flatbuffers::FlatBufferBuilder &_fbb,
    CanaryLib::Thing thing_type = CanaryLib::Thing_NONE,
    flatbuffers::Offset<void> thing = 0,
    const CanaryLib::Position *pos = 0,
    bool clean_tile = false,
    bool is_central_pos = false) {
  ThingDataBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_thing(thing);
  builder_.add_is_central_pos(is_central_pos);
  builder_.add_clean_tile(clean_tile);
  builder_.add_thing_type(thing_type);
  return builder_.Finish();
}

inline bool VerifyThing(flatbuffers::Verifier &verifier, const void *obj, Thing type) {
  switch (type) {
    case Thing_NONE: {
      return true;
    }
    case Thing_CreatureData: {
      auto ptr = reinterpret_cast<const CanaryLib::CreatureData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Thing_ItemData: {
      return verifier.Verify<CanaryLib::ItemData>(static_cast<const uint8_t *>(obj), 0);
    }
    default: return true;
  }
}

inline bool VerifyThingVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyThing(
        verifier,  values->Get(i), types->GetEnum<Thing>(i))) {
      return false;
    }
  }
  return true;
}

inline const CanaryLib::ThingData *GetThingData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::ThingData>(buf);
}

inline const CanaryLib::ThingData *GetSizePrefixedThingData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::ThingData>(buf);
}

inline bool VerifyThingDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::ThingData>(nullptr);
}

inline bool VerifySizePrefixedThingDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::ThingData>(nullptr);
}

inline void FinishThingDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::ThingData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedThingDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::ThingData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_THINGDATA_CANARYLIB_H_
