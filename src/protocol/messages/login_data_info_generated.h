// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINDATAINFO_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_LOGINDATAINFO_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct LoginDataInfo;
struct LoginDataInfoBuilder;

struct LoginDataInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginDataInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_AUTH_TOKEN = 6,
    VT_PASSWORD = 8,
    VT_STAY_LOGGED = 10,
    VT_XTEA_KEY = 12,
    VT_PADDING = 14
  };
  const flatbuffers::String *account() const {
    return GetPointer<const flatbuffers::String *>(VT_ACCOUNT);
  }
  const flatbuffers::String *auth_token() const {
    return GetPointer<const flatbuffers::String *>(VT_AUTH_TOKEN);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool stay_logged() const {
    return GetField<uint8_t>(VT_STAY_LOGGED, 0) != 0;
  }
  const flatbuffers::Vector<uint32_t> *xtea_key() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_XTEA_KEY);
  }
  const flatbuffers::Vector<uint8_t> *padding() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PADDING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           VerifyOffset(verifier, VT_AUTH_TOKEN) &&
           verifier.VerifyString(auth_token()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyField<uint8_t>(verifier, VT_STAY_LOGGED) &&
           VerifyOffset(verifier, VT_XTEA_KEY) &&
           verifier.VerifyVector(xtea_key()) &&
           VerifyOffset(verifier, VT_PADDING) &&
           verifier.VerifyVector(padding()) &&
           verifier.EndTable();
  }
};

struct LoginDataInfoBuilder {
  typedef LoginDataInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account(flatbuffers::Offset<flatbuffers::String> account) {
    fbb_.AddOffset(LoginDataInfo::VT_ACCOUNT, account);
  }
  void add_auth_token(flatbuffers::Offset<flatbuffers::String> auth_token) {
    fbb_.AddOffset(LoginDataInfo::VT_AUTH_TOKEN, auth_token);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(LoginDataInfo::VT_PASSWORD, password);
  }
  void add_stay_logged(bool stay_logged) {
    fbb_.AddElement<uint8_t>(LoginDataInfo::VT_STAY_LOGGED, static_cast<uint8_t>(stay_logged), 0);
  }
  void add_xtea_key(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> xtea_key) {
    fbb_.AddOffset(LoginDataInfo::VT_XTEA_KEY, xtea_key);
  }
  void add_padding(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> padding) {
    fbb_.AddOffset(LoginDataInfo::VT_PADDING, padding);
  }
  explicit LoginDataInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoginDataInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginDataInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginDataInfo> CreateLoginDataInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> account = 0,
    flatbuffers::Offset<flatbuffers::String> auth_token = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0,
    bool stay_logged = false,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> xtea_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> padding = 0) {
  LoginDataInfoBuilder builder_(_fbb);
  builder_.add_padding(padding);
  builder_.add_xtea_key(xtea_key);
  builder_.add_password(password);
  builder_.add_auth_token(auth_token);
  builder_.add_account(account);
  builder_.add_stay_logged(stay_logged);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginDataInfo> CreateLoginDataInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr,
    const char *auth_token = nullptr,
    const char *password = nullptr,
    bool stay_logged = false,
    const std::vector<uint32_t> *xtea_key = nullptr,
    const std::vector<uint8_t> *padding = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  auto auth_token__ = auth_token ? _fbb.CreateString(auth_token) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto xtea_key__ = xtea_key ? _fbb.CreateVector<uint32_t>(*xtea_key) : 0;
  auto padding__ = padding ? _fbb.CreateVector<uint8_t>(*padding) : 0;
  return CanaryLib::CreateLoginDataInfo(
      _fbb,
      account__,
      auth_token__,
      password__,
      stay_logged,
      xtea_key__,
      padding__);
}

inline const CanaryLib::LoginDataInfo *GetLoginDataInfo(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::LoginDataInfo>(buf);
}

inline const CanaryLib::LoginDataInfo *GetSizePrefixedLoginDataInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::LoginDataInfo>(buf);
}

inline bool VerifyLoginDataInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::LoginDataInfo>(nullptr);
}

inline bool VerifySizePrefixedLoginDataInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::LoginDataInfo>(nullptr);
}

inline void FinishLoginDataInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::LoginDataInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginDataInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::LoginDataInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_LOGINDATAINFO_CANARYLIB_H_
