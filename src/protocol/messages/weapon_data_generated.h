// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEAPONDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_WEAPONDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct WeaponData;
struct WeaponDataBuilder;

struct WeaponData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WeaponDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DAMAGE = 8
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           verifier.EndTable();
  }
};

struct WeaponDataBuilder {
  typedef WeaponData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(WeaponData::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WeaponData::VT_NAME, name);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(WeaponData::VT_DAMAGE, damage, 0);
  }
  explicit WeaponDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WeaponData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WeaponData>(end);
    return o;
  }
};

inline flatbuffers::Offset<WeaponData> CreateWeaponData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t damage = 0) {
  WeaponDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_damage(damage);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<WeaponData> CreateWeaponDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    const char *name = nullptr,
    int16_t damage = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CanaryLib::CreateWeaponData(
      _fbb,
      id,
      name__,
      damage);
}

inline const CanaryLib::WeaponData *GetWeaponData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::WeaponData>(buf);
}

inline const CanaryLib::WeaponData *GetSizePrefixedWeaponData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::WeaponData>(buf);
}

inline bool VerifyWeaponDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::WeaponData>(nullptr);
}

inline bool VerifySizePrefixedWeaponDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::WeaponData>(nullptr);
}

inline void FinishWeaponDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::WeaponData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWeaponDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::WeaponData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_WEAPONDATA_CANARYLIB_H_
