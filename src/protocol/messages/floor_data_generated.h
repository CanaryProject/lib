// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLOORDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_FLOORDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct Light;

struct Position;

struct Outfit;

struct ItemInfo;

struct CreatureInfo;
struct CreatureInfoBuilder;

struct Tile;
struct TileBuilder;

struct FloorData;
struct FloorDataBuilder;

enum CreatureType_t {
  CreatureType_t_CREATURETYPE_PLAYER = 0,
  CreatureType_t_CREATURETYPE_MONSTER = 1,
  CreatureType_t_CREATURETYPE_NPC = 2,
  CreatureType_t_CREATURETYPE_SUMMON_OWN = 3,
  CreatureType_t_CREATURETYPE_SUMMON_OTHERS = 4,
  CreatureType_t_MIN = CreatureType_t_CREATURETYPE_PLAYER,
  CreatureType_t_MAX = CreatureType_t_CREATURETYPE_SUMMON_OTHERS
};

inline const CreatureType_t (&EnumValuesCreatureType_t())[5] {
  static const CreatureType_t values[] = {
    CreatureType_t_CREATURETYPE_PLAYER,
    CreatureType_t_CREATURETYPE_MONSTER,
    CreatureType_t_CREATURETYPE_NPC,
    CreatureType_t_CREATURETYPE_SUMMON_OWN,
    CreatureType_t_CREATURETYPE_SUMMON_OTHERS
  };
  return values;
}

inline const char * const *EnumNamesCreatureType_t() {
  static const char * const names[6] = {
    "CREATURETYPE_PLAYER",
    "CREATURETYPE_MONSTER",
    "CREATURETYPE_NPC",
    "CREATURETYPE_SUMMON_OWN",
    "CREATURETYPE_SUMMON_OTHERS",
    nullptr
  };
  return names;
}

inline const char *EnumNameCreatureType_t(CreatureType_t e) {
  if (flatbuffers::IsOutRange(e, CreatureType_t_CREATURETYPE_PLAYER, CreatureType_t_CREATURETYPE_SUMMON_OTHERS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCreatureType_t()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Light FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t color_;
  uint8_t intensity_;

 public:
  Light()
      : color_(0),
        intensity_(0) {
  }
  Light(uint8_t _color, uint8_t _intensity)
      : color_(flatbuffers::EndianScalar(_color)),
        intensity_(flatbuffers::EndianScalar(_intensity)) {
  }
  uint8_t color() const {
    return flatbuffers::EndianScalar(color_);
  }
  uint8_t intensity() const {
    return flatbuffers::EndianScalar(intensity_);
  }
};
FLATBUFFERS_STRUCT_END(Light, 2);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Position FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t x_;
  uint16_t y_;
  uint8_t z_;
  int8_t padding0__;

 public:
  Position()
      : x_(0),
        y_(0),
        z_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Position(uint16_t _x, uint16_t _y, uint8_t _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        padding0__(0) {
  }
  uint16_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  uint16_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  uint8_t z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Position, 6);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Outfit FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t id_;
  uint8_t body_;
  uint8_t feet_;
  uint8_t head_;
  uint8_t legs_;
  uint8_t addon_;
  int8_t padding0__;
  uint16_t mount_;
  uint16_t item_id_;

 public:
  Outfit()
      : id_(0),
        body_(0),
        feet_(0),
        head_(0),
        legs_(0),
        addon_(0),
        padding0__(0),
        mount_(0),
        item_id_(0) {
    (void)padding0__;
  }
  Outfit(uint16_t _id, uint8_t _body, uint8_t _feet, uint8_t _head, uint8_t _legs, uint8_t _addon, uint16_t _mount, uint16_t _item_id)
      : id_(flatbuffers::EndianScalar(_id)),
        body_(flatbuffers::EndianScalar(_body)),
        feet_(flatbuffers::EndianScalar(_feet)),
        head_(flatbuffers::EndianScalar(_head)),
        legs_(flatbuffers::EndianScalar(_legs)),
        addon_(flatbuffers::EndianScalar(_addon)),
        padding0__(0),
        mount_(flatbuffers::EndianScalar(_mount)),
        item_id_(flatbuffers::EndianScalar(_item_id)) {
  }
  uint16_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  uint8_t body() const {
    return flatbuffers::EndianScalar(body_);
  }
  uint8_t feet() const {
    return flatbuffers::EndianScalar(feet_);
  }
  uint8_t head() const {
    return flatbuffers::EndianScalar(head_);
  }
  uint8_t legs() const {
    return flatbuffers::EndianScalar(legs_);
  }
  uint8_t addon() const {
    return flatbuffers::EndianScalar(addon_);
  }
  uint16_t mount() const {
    return flatbuffers::EndianScalar(mount_);
  }
  uint16_t item_id() const {
    return flatbuffers::EndianScalar(item_id_);
  }
};
FLATBUFFERS_STRUCT_END(Outfit, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) ItemInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t id_;
  uint8_t count_;
  uint8_t fluid_type_;

 public:
  ItemInfo()
      : id_(0),
        count_(0),
        fluid_type_(0) {
  }
  ItemInfo(uint16_t _id, uint8_t _count, uint8_t _fluid_type)
      : id_(flatbuffers::EndianScalar(_id)),
        count_(flatbuffers::EndianScalar(_count)),
        fluid_type_(flatbuffers::EndianScalar(_fluid_type)) {
  }
  uint16_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  uint8_t count() const {
    return flatbuffers::EndianScalar(count_);
  }
  uint8_t fluid_type() const {
    return flatbuffers::EndianScalar(fluid_type_);
  }
};
FLATBUFFERS_STRUCT_END(ItemInfo, 4);

struct CreatureInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreatureInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_KNOWN = 6,
    VT_REMOVE_ID = 8,
    VT_TYPE = 10,
    VT_NAME = 12,
    VT_DIRECTION = 14,
    VT_HEALTH_PERCENT = 16,
    VT_LIGHT = 18,
    VT_OUTFIT = 20,
    VT_SPEED = 22,
    VT_WALKABLE = 24,
    VT_GUILD_EMBLEM = 26,
    VT_ICON = 28,
    VT_PARTY_SHIELD = 30,
    VT_SKULL = 32,
    VT_SQUARE_MARK = 34,
    VT_MASTER_ID = 36
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool known() const {
    return GetField<uint8_t>(VT_KNOWN, 0) != 0;
  }
  uint32_t remove_id() const {
    return GetField<uint32_t>(VT_REMOVE_ID, 0);
  }
  CanaryLib::CreatureType_t type() const {
    return static_cast<CanaryLib::CreatureType_t>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t direction() const {
    return GetField<uint8_t>(VT_DIRECTION, 0);
  }
  uint8_t health_percent() const {
    return GetField<uint8_t>(VT_HEALTH_PERCENT, 100);
  }
  const CanaryLib::Light *light() const {
    return GetStruct<const CanaryLib::Light *>(VT_LIGHT);
  }
  const CanaryLib::Outfit *outfit() const {
    return GetStruct<const CanaryLib::Outfit *>(VT_OUTFIT);
  }
  uint16_t speed() const {
    return GetField<uint16_t>(VT_SPEED, 0);
  }
  bool walkable() const {
    return GetField<uint8_t>(VT_WALKABLE, 0) != 0;
  }
  uint8_t guild_emblem() const {
    return GetField<uint8_t>(VT_GUILD_EMBLEM, 0);
  }
  uint8_t icon() const {
    return GetField<uint8_t>(VT_ICON, 0);
  }
  uint8_t party_shield() const {
    return GetField<uint8_t>(VT_PARTY_SHIELD, 0);
  }
  uint8_t skull() const {
    return GetField<uint8_t>(VT_SKULL, 0);
  }
  uint8_t square_mark() const {
    return GetField<uint8_t>(VT_SQUARE_MARK, 255);
  }
  uint32_t master_id() const {
    return GetField<uint32_t>(VT_MASTER_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_KNOWN) &&
           VerifyField<uint32_t>(verifier, VT_REMOVE_ID) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_DIRECTION) &&
           VerifyField<uint8_t>(verifier, VT_HEALTH_PERCENT) &&
           VerifyField<CanaryLib::Light>(verifier, VT_LIGHT) &&
           VerifyField<CanaryLib::Outfit>(verifier, VT_OUTFIT) &&
           VerifyField<uint16_t>(verifier, VT_SPEED) &&
           VerifyField<uint8_t>(verifier, VT_WALKABLE) &&
           VerifyField<uint8_t>(verifier, VT_GUILD_EMBLEM) &&
           VerifyField<uint8_t>(verifier, VT_ICON) &&
           VerifyField<uint8_t>(verifier, VT_PARTY_SHIELD) &&
           VerifyField<uint8_t>(verifier, VT_SKULL) &&
           VerifyField<uint8_t>(verifier, VT_SQUARE_MARK) &&
           VerifyField<uint32_t>(verifier, VT_MASTER_ID) &&
           verifier.EndTable();
  }
};

struct CreatureInfoBuilder {
  typedef CreatureInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(CreatureInfo::VT_ID, id, 0);
  }
  void add_known(bool known) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_KNOWN, static_cast<uint8_t>(known), 0);
  }
  void add_remove_id(uint32_t remove_id) {
    fbb_.AddElement<uint32_t>(CreatureInfo::VT_REMOVE_ID, remove_id, 0);
  }
  void add_type(CanaryLib::CreatureType_t type) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CreatureInfo::VT_NAME, name);
  }
  void add_direction(uint8_t direction) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_DIRECTION, direction, 0);
  }
  void add_health_percent(uint8_t health_percent) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_HEALTH_PERCENT, health_percent, 100);
  }
  void add_light(const CanaryLib::Light *light) {
    fbb_.AddStruct(CreatureInfo::VT_LIGHT, light);
  }
  void add_outfit(const CanaryLib::Outfit *outfit) {
    fbb_.AddStruct(CreatureInfo::VT_OUTFIT, outfit);
  }
  void add_speed(uint16_t speed) {
    fbb_.AddElement<uint16_t>(CreatureInfo::VT_SPEED, speed, 0);
  }
  void add_walkable(bool walkable) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_WALKABLE, static_cast<uint8_t>(walkable), 0);
  }
  void add_guild_emblem(uint8_t guild_emblem) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_GUILD_EMBLEM, guild_emblem, 0);
  }
  void add_icon(uint8_t icon) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_ICON, icon, 0);
  }
  void add_party_shield(uint8_t party_shield) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_PARTY_SHIELD, party_shield, 0);
  }
  void add_skull(uint8_t skull) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_SKULL, skull, 0);
  }
  void add_square_mark(uint8_t square_mark) {
    fbb_.AddElement<uint8_t>(CreatureInfo::VT_SQUARE_MARK, square_mark, 255);
  }
  void add_master_id(uint32_t master_id) {
    fbb_.AddElement<uint32_t>(CreatureInfo::VT_MASTER_ID, master_id, 0);
  }
  explicit CreatureInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreatureInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreatureInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreatureInfo> CreateCreatureInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool known = false,
    uint32_t remove_id = 0,
    CanaryLib::CreatureType_t type = CanaryLib::CreatureType_t_CREATURETYPE_PLAYER,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t direction = 0,
    uint8_t health_percent = 100,
    const CanaryLib::Light *light = 0,
    const CanaryLib::Outfit *outfit = 0,
    uint16_t speed = 0,
    bool walkable = false,
    uint8_t guild_emblem = 0,
    uint8_t icon = 0,
    uint8_t party_shield = 0,
    uint8_t skull = 0,
    uint8_t square_mark = 255,
    uint32_t master_id = 0) {
  CreatureInfoBuilder builder_(_fbb);
  builder_.add_master_id(master_id);
  builder_.add_outfit(outfit);
  builder_.add_light(light);
  builder_.add_name(name);
  builder_.add_remove_id(remove_id);
  builder_.add_id(id);
  builder_.add_speed(speed);
  builder_.add_square_mark(square_mark);
  builder_.add_skull(skull);
  builder_.add_party_shield(party_shield);
  builder_.add_icon(icon);
  builder_.add_guild_emblem(guild_emblem);
  builder_.add_walkable(walkable);
  builder_.add_health_percent(health_percent);
  builder_.add_direction(direction);
  builder_.add_type(type);
  builder_.add_known(known);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreatureInfo> CreateCreatureInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool known = false,
    uint32_t remove_id = 0,
    CanaryLib::CreatureType_t type = CanaryLib::CreatureType_t_CREATURETYPE_PLAYER,
    const char *name = nullptr,
    uint8_t direction = 0,
    uint8_t health_percent = 100,
    const CanaryLib::Light *light = 0,
    const CanaryLib::Outfit *outfit = 0,
    uint16_t speed = 0,
    bool walkable = false,
    uint8_t guild_emblem = 0,
    uint8_t icon = 0,
    uint8_t party_shield = 0,
    uint8_t skull = 0,
    uint8_t square_mark = 255,
    uint32_t master_id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CanaryLib::CreateCreatureInfo(
      _fbb,
      id,
      known,
      remove_id,
      type,
      name__,
      direction,
      health_percent,
      light,
      outfit,
      speed,
      walkable,
      guild_emblem,
      icon,
      party_shield,
      skull,
      square_mark,
      master_id);
}

struct Tile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CREATURES = 4,
    VT_GROUND = 6,
    VT_GROUND_BORDERS = 8,
    VT_BOTTOM_ITEMS = 10,
    VT_TOP_ITEMS = 12,
    VT_COMMON_ITEMS = 14
  };
  const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CreatureInfo>> *creatures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CreatureInfo>> *>(VT_CREATURES);
  }
  const CanaryLib::ItemInfo *ground() const {
    return GetStruct<const CanaryLib::ItemInfo *>(VT_GROUND);
  }
  const flatbuffers::Vector<const CanaryLib::ItemInfo *> *ground_borders() const {
    return GetPointer<const flatbuffers::Vector<const CanaryLib::ItemInfo *> *>(VT_GROUND_BORDERS);
  }
  const flatbuffers::Vector<const CanaryLib::ItemInfo *> *bottom_items() const {
    return GetPointer<const flatbuffers::Vector<const CanaryLib::ItemInfo *> *>(VT_BOTTOM_ITEMS);
  }
  const flatbuffers::Vector<const CanaryLib::ItemInfo *> *top_items() const {
    return GetPointer<const flatbuffers::Vector<const CanaryLib::ItemInfo *> *>(VT_TOP_ITEMS);
  }
  const flatbuffers::Vector<const CanaryLib::ItemInfo *> *common_items() const {
    return GetPointer<const flatbuffers::Vector<const CanaryLib::ItemInfo *> *>(VT_COMMON_ITEMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CREATURES) &&
           verifier.VerifyVector(creatures()) &&
           verifier.VerifyVectorOfTables(creatures()) &&
           VerifyField<CanaryLib::ItemInfo>(verifier, VT_GROUND) &&
           VerifyOffset(verifier, VT_GROUND_BORDERS) &&
           verifier.VerifyVector(ground_borders()) &&
           VerifyOffset(verifier, VT_BOTTOM_ITEMS) &&
           verifier.VerifyVector(bottom_items()) &&
           VerifyOffset(verifier, VT_TOP_ITEMS) &&
           verifier.VerifyVector(top_items()) &&
           VerifyOffset(verifier, VT_COMMON_ITEMS) &&
           verifier.VerifyVector(common_items()) &&
           verifier.EndTable();
  }
};

struct TileBuilder {
  typedef Tile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_creatures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CreatureInfo>>> creatures) {
    fbb_.AddOffset(Tile::VT_CREATURES, creatures);
  }
  void add_ground(const CanaryLib::ItemInfo *ground) {
    fbb_.AddStruct(Tile::VT_GROUND, ground);
  }
  void add_ground_borders(flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> ground_borders) {
    fbb_.AddOffset(Tile::VT_GROUND_BORDERS, ground_borders);
  }
  void add_bottom_items(flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> bottom_items) {
    fbb_.AddOffset(Tile::VT_BOTTOM_ITEMS, bottom_items);
  }
  void add_top_items(flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> top_items) {
    fbb_.AddOffset(Tile::VT_TOP_ITEMS, top_items);
  }
  void add_common_items(flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> common_items) {
    fbb_.AddOffset(Tile::VT_COMMON_ITEMS, common_items);
  }
  explicit TileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Tile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tile>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tile> CreateTile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::CreatureInfo>>> creatures = 0,
    const CanaryLib::ItemInfo *ground = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> ground_borders = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> bottom_items = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> top_items = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CanaryLib::ItemInfo *>> common_items = 0) {
  TileBuilder builder_(_fbb);
  builder_.add_common_items(common_items);
  builder_.add_top_items(top_items);
  builder_.add_bottom_items(bottom_items);
  builder_.add_ground_borders(ground_borders);
  builder_.add_ground(ground);
  builder_.add_creatures(creatures);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tile> CreateTileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CanaryLib::CreatureInfo>> *creatures = nullptr,
    const CanaryLib::ItemInfo *ground = 0,
    const std::vector<CanaryLib::ItemInfo> *ground_borders = nullptr,
    const std::vector<CanaryLib::ItemInfo> *bottom_items = nullptr,
    const std::vector<CanaryLib::ItemInfo> *top_items = nullptr,
    const std::vector<CanaryLib::ItemInfo> *common_items = nullptr) {
  auto creatures__ = creatures ? _fbb.CreateVector<flatbuffers::Offset<CanaryLib::CreatureInfo>>(*creatures) : 0;
  auto ground_borders__ = ground_borders ? _fbb.CreateVectorOfStructs<CanaryLib::ItemInfo>(*ground_borders) : 0;
  auto bottom_items__ = bottom_items ? _fbb.CreateVectorOfStructs<CanaryLib::ItemInfo>(*bottom_items) : 0;
  auto top_items__ = top_items ? _fbb.CreateVectorOfStructs<CanaryLib::ItemInfo>(*top_items) : 0;
  auto common_items__ = common_items ? _fbb.CreateVectorOfStructs<CanaryLib::ItemInfo>(*common_items) : 0;
  return CanaryLib::CreateTile(
      _fbb,
      creatures__,
      ground,
      ground_borders__,
      bottom_items__,
      top_items__,
      common_items__);
}

struct FloorData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FloorDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TILES = 4,
    VT_CENTRAL_POS = 6,
    VT_SIZE = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::Tile>> *tiles() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CanaryLib::Tile>> *>(VT_TILES);
  }
  const CanaryLib::Position *central_pos() const {
    return GetStruct<const CanaryLib::Position *>(VT_CENTRAL_POS);
  }
  const CanaryLib::Position *size() const {
    return GetStruct<const CanaryLib::Position *>(VT_SIZE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           verifier.VerifyVectorOfTables(tiles()) &&
           VerifyField<CanaryLib::Position>(verifier, VT_CENTRAL_POS) &&
           VerifyField<CanaryLib::Position>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct FloorDataBuilder {
  typedef FloorData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tiles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::Tile>>> tiles) {
    fbb_.AddOffset(FloorData::VT_TILES, tiles);
  }
  void add_central_pos(const CanaryLib::Position *central_pos) {
    fbb_.AddStruct(FloorData::VT_CENTRAL_POS, central_pos);
  }
  void add_size(const CanaryLib::Position *size) {
    fbb_.AddStruct(FloorData::VT_SIZE, size);
  }
  explicit FloorDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FloorData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FloorData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FloorData> CreateFloorData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CanaryLib::Tile>>> tiles = 0,
    const CanaryLib::Position *central_pos = 0,
    const CanaryLib::Position *size = 0) {
  FloorDataBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_central_pos(central_pos);
  builder_.add_tiles(tiles);
  return builder_.Finish();
}

inline flatbuffers::Offset<FloorData> CreateFloorDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CanaryLib::Tile>> *tiles = nullptr,
    const CanaryLib::Position *central_pos = 0,
    const CanaryLib::Position *size = 0) {
  auto tiles__ = tiles ? _fbb.CreateVector<flatbuffers::Offset<CanaryLib::Tile>>(*tiles) : 0;
  return CanaryLib::CreateFloorData(
      _fbb,
      tiles__,
      central_pos,
      size);
}

inline const CanaryLib::FloorData *GetFloorData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::FloorData>(buf);
}

inline const CanaryLib::FloorData *GetSizePrefixedFloorData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::FloorData>(buf);
}

inline bool VerifyFloorDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::FloorData>(nullptr);
}

inline bool VerifySizePrefixedFloorDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::FloorData>(nullptr);
}

inline void FinishFloorDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::FloorData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFloorDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::FloorData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_FLOORDATA_CANARYLIB_H_
