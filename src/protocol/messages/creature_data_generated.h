// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATUREDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_CREATUREDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

#include "general_structures_generated.h"

namespace CanaryLib {

struct CreatureData;
struct CreatureDataBuilder;

enum CreatureType_t {
  CreatureType_t_CREATURETYPE_PLAYER = 0,
  CreatureType_t_CREATURETYPE_MONSTER = 1,
  CreatureType_t_CREATURETYPE_NPC = 2,
  CreatureType_t_CREATURETYPE_SUMMON_OWN = 3,
  CreatureType_t_CREATURETYPE_SUMMON_OTHERS = 4,
  CreatureType_t_MIN = CreatureType_t_CREATURETYPE_PLAYER,
  CreatureType_t_MAX = CreatureType_t_CREATURETYPE_SUMMON_OTHERS
};

inline const CreatureType_t (&EnumValuesCreatureType_t())[5] {
  static const CreatureType_t values[] = {
    CreatureType_t_CREATURETYPE_PLAYER,
    CreatureType_t_CREATURETYPE_MONSTER,
    CreatureType_t_CREATURETYPE_NPC,
    CreatureType_t_CREATURETYPE_SUMMON_OWN,
    CreatureType_t_CREATURETYPE_SUMMON_OTHERS
  };
  return values;
}

inline const char * const *EnumNamesCreatureType_t() {
  static const char * const names[6] = {
    "CREATURETYPE_PLAYER",
    "CREATURETYPE_MONSTER",
    "CREATURETYPE_NPC",
    "CREATURETYPE_SUMMON_OWN",
    "CREATURETYPE_SUMMON_OTHERS",
    nullptr
  };
  return names;
}

inline const char *EnumNameCreatureType_t(CreatureType_t e) {
  if (flatbuffers::IsOutRange(e, CreatureType_t_CREATURETYPE_PLAYER, CreatureType_t_CREATURETYPE_SUMMON_OTHERS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCreatureType_t()[index];
}

struct CreatureData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreatureDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_KNOWN = 6,
    VT_REMOVE_ID = 8,
    VT_TYPE = 10,
    VT_NAME = 12,
    VT_DIRECTION = 14,
    VT_HEALTH_PERCENT = 16,
    VT_LIGHT = 18,
    VT_OUTFIT = 20,
    VT_SPEED = 22,
    VT_WALKABLE = 24,
    VT_GUILD_EMBLEM = 26,
    VT_ICON = 28,
    VT_PARTY_SHIELD = 30,
    VT_SKULL = 32,
    VT_SQUARE_MARK = 34,
    VT_MASTER_ID = 36
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool known() const {
    return GetField<uint8_t>(VT_KNOWN, 0) != 0;
  }
  uint32_t remove_id() const {
    return GetField<uint32_t>(VT_REMOVE_ID, 0);
  }
  CanaryLib::CreatureType_t type() const {
    return static_cast<CanaryLib::CreatureType_t>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t direction() const {
    return GetField<uint8_t>(VT_DIRECTION, 0);
  }
  uint8_t health_percent() const {
    return GetField<uint8_t>(VT_HEALTH_PERCENT, 100);
  }
  const CanaryLib::Light *light() const {
    return GetStruct<const CanaryLib::Light *>(VT_LIGHT);
  }
  const CanaryLib::Outfit *outfit() const {
    return GetStruct<const CanaryLib::Outfit *>(VT_OUTFIT);
  }
  uint16_t speed() const {
    return GetField<uint16_t>(VT_SPEED, 0);
  }
  bool walkable() const {
    return GetField<uint8_t>(VT_WALKABLE, 0) != 0;
  }
  uint8_t guild_emblem() const {
    return GetField<uint8_t>(VT_GUILD_EMBLEM, 0);
  }
  uint8_t icon() const {
    return GetField<uint8_t>(VT_ICON, 0);
  }
  uint8_t party_shield() const {
    return GetField<uint8_t>(VT_PARTY_SHIELD, 0);
  }
  uint8_t skull() const {
    return GetField<uint8_t>(VT_SKULL, 0);
  }
  uint8_t square_mark() const {
    return GetField<uint8_t>(VT_SQUARE_MARK, 255);
  }
  uint32_t master_id() const {
    return GetField<uint32_t>(VT_MASTER_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_KNOWN) &&
           VerifyField<uint32_t>(verifier, VT_REMOVE_ID) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_DIRECTION) &&
           VerifyField<uint8_t>(verifier, VT_HEALTH_PERCENT) &&
           VerifyField<CanaryLib::Light>(verifier, VT_LIGHT) &&
           VerifyField<CanaryLib::Outfit>(verifier, VT_OUTFIT) &&
           VerifyField<uint16_t>(verifier, VT_SPEED) &&
           VerifyField<uint8_t>(verifier, VT_WALKABLE) &&
           VerifyField<uint8_t>(verifier, VT_GUILD_EMBLEM) &&
           VerifyField<uint8_t>(verifier, VT_ICON) &&
           VerifyField<uint8_t>(verifier, VT_PARTY_SHIELD) &&
           VerifyField<uint8_t>(verifier, VT_SKULL) &&
           VerifyField<uint8_t>(verifier, VT_SQUARE_MARK) &&
           VerifyField<uint32_t>(verifier, VT_MASTER_ID) &&
           verifier.EndTable();
  }
};

struct CreatureDataBuilder {
  typedef CreatureData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(CreatureData::VT_ID, id, 0);
  }
  void add_known(bool known) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_KNOWN, static_cast<uint8_t>(known), 0);
  }
  void add_remove_id(uint32_t remove_id) {
    fbb_.AddElement<uint32_t>(CreatureData::VT_REMOVE_ID, remove_id, 0);
  }
  void add_type(CanaryLib::CreatureType_t type) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CreatureData::VT_NAME, name);
  }
  void add_direction(uint8_t direction) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_DIRECTION, direction, 0);
  }
  void add_health_percent(uint8_t health_percent) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_HEALTH_PERCENT, health_percent, 100);
  }
  void add_light(const CanaryLib::Light *light) {
    fbb_.AddStruct(CreatureData::VT_LIGHT, light);
  }
  void add_outfit(const CanaryLib::Outfit *outfit) {
    fbb_.AddStruct(CreatureData::VT_OUTFIT, outfit);
  }
  void add_speed(uint16_t speed) {
    fbb_.AddElement<uint16_t>(CreatureData::VT_SPEED, speed, 0);
  }
  void add_walkable(bool walkable) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_WALKABLE, static_cast<uint8_t>(walkable), 0);
  }
  void add_guild_emblem(uint8_t guild_emblem) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_GUILD_EMBLEM, guild_emblem, 0);
  }
  void add_icon(uint8_t icon) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_ICON, icon, 0);
  }
  void add_party_shield(uint8_t party_shield) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_PARTY_SHIELD, party_shield, 0);
  }
  void add_skull(uint8_t skull) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_SKULL, skull, 0);
  }
  void add_square_mark(uint8_t square_mark) {
    fbb_.AddElement<uint8_t>(CreatureData::VT_SQUARE_MARK, square_mark, 255);
  }
  void add_master_id(uint32_t master_id) {
    fbb_.AddElement<uint32_t>(CreatureData::VT_MASTER_ID, master_id, 0);
  }
  explicit CreatureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreatureData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreatureData>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreatureData> CreateCreatureData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool known = false,
    uint32_t remove_id = 0,
    CanaryLib::CreatureType_t type = CanaryLib::CreatureType_t_CREATURETYPE_PLAYER,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t direction = 0,
    uint8_t health_percent = 100,
    const CanaryLib::Light *light = 0,
    const CanaryLib::Outfit *outfit = 0,
    uint16_t speed = 0,
    bool walkable = false,
    uint8_t guild_emblem = 0,
    uint8_t icon = 0,
    uint8_t party_shield = 0,
    uint8_t skull = 0,
    uint8_t square_mark = 255,
    uint32_t master_id = 0) {
  CreatureDataBuilder builder_(_fbb);
  builder_.add_master_id(master_id);
  builder_.add_outfit(outfit);
  builder_.add_light(light);
  builder_.add_name(name);
  builder_.add_remove_id(remove_id);
  builder_.add_id(id);
  builder_.add_speed(speed);
  builder_.add_square_mark(square_mark);
  builder_.add_skull(skull);
  builder_.add_party_shield(party_shield);
  builder_.add_icon(icon);
  builder_.add_guild_emblem(guild_emblem);
  builder_.add_walkable(walkable);
  builder_.add_health_percent(health_percent);
  builder_.add_direction(direction);
  builder_.add_type(type);
  builder_.add_known(known);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreatureData> CreateCreatureDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool known = false,
    uint32_t remove_id = 0,
    CanaryLib::CreatureType_t type = CanaryLib::CreatureType_t_CREATURETYPE_PLAYER,
    const char *name = nullptr,
    uint8_t direction = 0,
    uint8_t health_percent = 100,
    const CanaryLib::Light *light = 0,
    const CanaryLib::Outfit *outfit = 0,
    uint16_t speed = 0,
    bool walkable = false,
    uint8_t guild_emblem = 0,
    uint8_t icon = 0,
    uint8_t party_shield = 0,
    uint8_t skull = 0,
    uint8_t square_mark = 255,
    uint32_t master_id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CanaryLib::CreateCreatureData(
      _fbb,
      id,
      known,
      remove_id,
      type,
      name__,
      direction,
      health_percent,
      light,
      outfit,
      speed,
      walkable,
      guild_emblem,
      icon,
      party_shield,
      skull,
      square_mark,
      master_id);
}

inline const CanaryLib::CreatureData *GetCreatureData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::CreatureData>(buf);
}

inline const CanaryLib::CreatureData *GetSizePrefixedCreatureData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::CreatureData>(buf);
}

inline bool VerifyCreatureDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::CreatureData>(nullptr);
}

inline bool VerifySizePrefixedCreatureDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::CreatureData>(nullptr);
}

inline void FinishCreatureDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::CreatureData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCreatureDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::CreatureData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_CREATUREDATA_CANARYLIB_H_
