// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERDATA_CANARYLIB_H_
#define FLATBUFFERS_GENERATED_PLAYERDATA_CANARYLIB_H_

#include "flatbuffers/flatbuffers.h"

namespace CanaryLib {

struct PlayerData;
struct PlayerDataBuilder;

struct PlayerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct PlayerDataBuilder {
  typedef PlayerData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(PlayerData::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PlayerData::VT_NAME, name);
  }
  explicit PlayerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerData> CreatePlayerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  PlayerDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayerData> CreatePlayerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CanaryLib::CreatePlayerData(
      _fbb,
      id,
      name__);
}

inline const CanaryLib::PlayerData *GetPlayerData(const void *buf) {
  return flatbuffers::GetRoot<CanaryLib::PlayerData>(buf);
}

inline const CanaryLib::PlayerData *GetSizePrefixedPlayerData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CanaryLib::PlayerData>(buf);
}

inline bool VerifyPlayerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CanaryLib::PlayerData>(nullptr);
}

inline bool VerifySizePrefixedPlayerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CanaryLib::PlayerData>(nullptr);
}

inline void FinishPlayerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::PlayerData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CanaryLib::PlayerData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CanaryLib

#endif  // FLATBUFFERS_GENERATED_PLAYERDATA_CANARYLIB_H_
